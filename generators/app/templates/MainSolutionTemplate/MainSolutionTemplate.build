<?xml version="1.0" ?>
<project name="MainSolutionTemplate" default="test" xmlns="http://nant.sourceforge.net/nightly/latest/nant.xsd">
  

  <!--Properties-->
  <property name="src.folder" value="src"/>
  <property name="src.sln.file" value="${src.folder}/MainSolutionTemplate.sln"/>
  <property name="src.sln.configuration" value="Debug"/>

  <property name="build.dir" value="build" />
  <property name="build.config.dir" value="${build.dir}\${src.sln.configuration}" dynamic="true"  />
  <property name="build.reports.dir" value="${build.dir}/Reports" />
  <property name="build.temp.dir" value="${build.dir}/Temp" />
  <property name="build.dist.dir" value="${build.dir}/Distibutions" />
  <property name="msbuild.executeable" value="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe"/>
  <property name="msbuild.executeable" value="C:\Windows\Microsoft.NET\Framework\v4.0.30319\MSBuild.exe" if="${not file::exists(msbuild.executeable)}" />
  <property name="msbuild.bin.folder" value="bin\${src.sln.configuration}"/>
  
  <property name="dropbox.public" value="C:\Users\${environment::get-user-name()}\Dropbox\Public\"/>
  
  <!-- Version -->
	<property name="version.buildFile" value="MainSolutionTemplate.build"/>
	<property name="version.assembly" value="${src.folder}/MainSolutionTemplate.Core/Properties/CommonAssemblyInfo.cs" />
	<property name="version.major" value="0"/>
  <property name="version.minor" value="0"/>
  <property name="version.build" value="1" />
  <property name="version.revision" value="*" />
  <property name="project.fullversion" value="${version.major}.${version.minor}.${version.build}" dynamic="true" />
  <property name="project.fullversion.file" value="${version.major}.${version.minor}.${version.build}.${version.revision}" dynamic="true" />

	<!-- File version controle -->
	<property name="git.path" value="C:\Program Files (x86)\Git\bin\"/>
	<property name="git.exe" value="${git.path}git.exe"/>
	
  <!-- Continues integration -->
  <property name="version.build" value="${build.number}" if="${property::exists('build.number')}"/>
	<property name="version.build" value="${environment::get-variable('BUILD_NUMBER')}" if="${environment::variable-exists('BUILD_NUMBER')}"/>

  <!-- User targets -->
	<target name="build" depends="clean compile" description="Compile and Run Tests" />
  <target name="test" depends="build, run-unit-tests" description="Compile and Run Tests" />
  <target name="cover" depends="build , run-code-cover-tests" description="Compile and Run Tests" />
  <target name="full" depends="version, test, dist , version.update"	description="Compiles, tests, and produces distributions" />
	<target name="ci.tests" depends="compile, run-unit-tests" description="Compile and Run Tests" />
	<target name="ci.deploy.qa" depends="compile, run-unit-tests" description="Compile and Run Tests" />
	<target name="ci.deploy.staging" depends="compile, run-unit-tests" description="Compile and Run Tests" />
	<target name="ci.deploy.release" depends="compile, run-unit-tests" description="Compile and Run Tests" />

	<!-- Internal targets -->
  <target name="clean" description="Delete Automated Build artifacts">
    <delete dir="${build.dir}" if="${directory::exists(build.dir)}" failonerror="false" />
    <delete failonerror="false">
      <fileset basedir="${src.folder}">
        <include name="*\Bin\**"/>
        <include name="*\Obj\**"/>
      </fileset>
    </delete>
  </target>

  <target name="compile" description="Compiles using the AutomatedDebug Configuration">
    <exec
		  program="${msbuild.executeable}"
		  commandline="${src.sln.file} /t:clean /p:Configuration=${src.sln.configuration} /v:q "
		  workingdir="." />
    <exec
		  program="${msbuild.executeable}"
		  commandline="${src.sln.file} /t:rebuild /p:Configuration=${src.sln.configuration} /v:q"
		  workingdir="." />
    <call target="msbuild.copy"/>
  </target>

  <target name="msbuild.copy">
		<copy todir="${build.config.dir}\MainSolutionTemplate.Console" overwrite="true">
			<fileset basedir="${src.folder}\MainSolutionTemplate.Console\${msbuild.bin.folder}">
					<include name="**\*"/>
			</fileset>
		</copy>
  </target>

  <target name="version" description="Generate AssemblyInfo">
    <echo message="Marking build with version ${project.fullversion}" />
    <loadfile  file="${version.assembly}" property="CommonAssemblyInfo.Data" />
    <regex pattern="\[assembly: (?'replaceme'AssemblyVersion.*)\]" input="${CommonAssemblyInfo.Data}" />
    <echo message="Updated from: ${replaceme}" />
    <echo message="${string::replace(CommonAssemblyInfo.Data, replaceme, 'AssemblyVersion(&quot;'+project.fullversion.file+'&quot;)')}" file="${version.assembly}"/>

  </target>

  
  <target name="version.update" description="Generate AssemblyInfo">
    
    <xmlpeek
    file="${version.buildFile}"
    xpath="/x:project/x:property[@name = 'version.build']/@value"
    property="version.build.read"
    verbose="false">
      <namespaces>
        <namespace prefix="x" uri="http://nant.sourceforge.net/nightly/latest/nant.xsd" />
      </namespaces>
    </xmlpeek>
    <loadfile  file="${version.buildFile}" property="build.Data" />
    <regex pattern="property (?'replaceme'name=&quot;version.build&quot;.*)" input="${build.Data}" />
    
    
    <property name="new.version.build" value="${int::parse(version.build.read)+1}"/>
    <echo message="Updated from: ${replaceme}" />
    <echo message="Updated To: ${new.version.build}" />
    <echo message="${string::replace(build.Data, replaceme, 'name=&quot;version.build&quot; value=&quot;'+new.version.build+'&quot; />')}" file="${version.buildFile}"/>

  </target>

  <target name="run-code-cover-tests" description="Code coverage of unit tests">
    <property name="NUnit.console" value="Tools\nunit\nunit-console.exe" />
    <property name="NUnit.console.args" value="/exclude=Integration Vault.UnitTests.dll" />
    <echo message="${NUnit.console} ${run-unit-tests.dir} Vault.UnitTests.dll " />
    <exec program="regsvr32"  commandline="/s tools\PartCover\PartCover.CorDriver.dll" />
    <exec program="Tools\PartCover\PartCover.exe" failonerror="false" >
      <arg value="--target &quot;${NUnit.console}&quot;" />
      <arg value="--target-work-dir &quot;${run-unit-tests.dir}&quot;"/>
      <arg value="--target-args  &quot;${NUnit.console.args}&quot;" />
      <arg value="--include &quot;[Vault*]*&quot;" />
      <arg value="--exclude &quot;[nunit*]*&quot;" />
      <arg value="--output &quot;${build.reports.dir}\partcover.xml&quot;" />
    </exec>
    <echo>tools\PartCover\PartCover.Browser.exe build\reports\partcover.xml</echo>
  </target>

  <target name="run-unit-tests">
    <mkdir dir="${build.reports.dir}"/>
    <foreach item="Folder" in="${build.config.dir}" property="foldername">
      <do>
        <if test="${string::contains(foldername,'Tests')}" >
          <property name="nunit2-tests-by-Folder-dll" value="${path::combine(foldername,path::get-file-name(foldername) + '.dll'  )}" />
          <echo message="Run nunit on ${nunit2-tests-by-Folder-dll}" />
          <nunit2 verbose="true" haltonfailure="true" failonerror="true">
            <formatter type="Xml" usefile="true" extension=".xml" outputdir="${build.reports.dir}"/>
            <test assemblyname="${nunit2-tests-by-Folder-dll}" haltonfailure="true">
              <categories>
                <exclude name="Integration"/>
              </categories>
            </test>
          </nunit2>
        </if>
      </do>
    </foreach>
  </target>

  <target name="dist">
    <mkdir dir="${build.dist.dir}" unless="${directory::exists(build.dist.dir)}"/>
    <foreach item="Folder" in="${build.config.dir}" property="foldername">
      <do>
        <if test="${not (string::contains(foldername,'Tests'))}" >
          <property name="dist.from.folder" value="${foldername}" />
          <property name="dist.to.folder" value="${path::combine(build.dist.dir,path::get-file-name(foldername)+ '.v' + project.fullversion + '.zip'  )}" />
          <echo message="Zip from ${dist.from.folder}" />
          <echo message="Zip to ${dist.to.folder}" />
          <zip zipfile="${dist.to.folder}">
            <fileset basedir="${dist.from.folder}">
              <include name="**\*"/>
              <exclude name="**\*.pdb"/>
            </fileset>
          </zip>
        </if>
      </do>
    </foreach>
  </target>

 
 <!-- Drop box -->
 <target name="dist.to.storage">
   <echo message="Copy to ${dropbox.public}"/>
    <copy todir="${dropbox.public}">
      <fileset basedir="${build.dist.dir}">
        <include name="**\*.zip"/>
      </fileset>
    </copy>
  </target>
  
</project>